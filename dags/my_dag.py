"""
my_dag
DAG auto-generated by Astro Cloud IDE.
"""

from airflow.decorators import dag
from astro import sql as aql
from astro.table import Table, Metadata
import pandas as pd
import pendulum

import pandas as pd


@aql.dataframe(task_id="read")
def read_func():
    import pandas as pd
    
    # using pandas to load the gapminderDataFiveYear dataset from github
    return pd.read_csv('https://raw.githubusercontent.com/plotly/datasets/master/gapminderDataFiveYear.csv')

@aql.run_raw_sql(conn_id="duckdb_default", task_id="from_1987", results_format="pandas_dataframe")
def from_1987_func(read: Table):
    return """
    SELECT * FROM {{read}}
    WHERE year>=1987 AND gdpPercap>1000
    """

@aql.run_raw_sql(conn_id="duckdb_default", task_id="only_asian_countries", results_format="pandas_dataframe")
def only_asian_countries_func(from_1987: Table):
    return """
    SELECT country,continent,gdpPercap
    FROM {{from_1987}}
    WHERE continent IN ('Asia')
    """

@aql.dataframe(task_id="final_result")
def final_result_func(only_asian_countries: pd.DataFrame):
    import pandas as pd
    
    
    return only_asian_countries.groupby(['country', 'gdpPercap']).agg({'gdpPercap': ['mean', 'count']}).reset_index()

default_args={
    "owner": "guptamuskan287@gmail.com,Open in Cloud IDE",
}

@dag(
    default_args=default_args,
    schedule="0 0 * * *",
    start_date=pendulum.from_format("2024-01-13", "YYYY-MM-DD").in_tz("UTC"),
    catchup=False,
    owner_links={
        "guptamuskan287@gmail.com": "mailto:guptamuskan287@gmail.com",
        "Open in Cloud IDE": "https://cloud.astronomer.io/clqt6me1r04lj01qjyb0getyp/cloud-ide/clrbwxchz04af01qzc248vcio/clrc6xdmq04d701qzv0dqfrpm",
    },
)
def my_dag():
    read = read_func()

    from_1987 = from_1987_func(
        read,
    )

    only_asian_countries = only_asian_countries_func(
        from_1987,
    )

    final_result = final_result_func(
        only_asian_countries,
    )

dag_obj = my_dag()
